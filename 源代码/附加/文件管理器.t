类 lin文件管理器_样式
	变量 背景色 : 整数 = 0xee000000
	变量 主题色 : 整数 = 0xff000000
	变量 文本色 : 整数 = 0xffffffff
	变量 副文本 : 整数 = 0x85ffffff
	变量 选中文本色 : 整数 = 0xffffffff
	变量 选中背景色 : 整数 = 0x46ffffff
	定义事件 样式更新()
结束 类

类 lin文件管理器 : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度DP=50,ID=1]])
	变量 相对布局2 : 相对布局
	@布局配置([[父布局=相对布局2,@左外边距DP=14,@位于布局中间=真,@位于布局左边=真,宽度=-1,@右外边距DP=14]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度DP=40,高度DP=40,可视=假]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局1,纵向布局=真,@左外边距DP=4,宽度=-1]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,字体大小=16,粗体=真,最大显示行数=1,省略显示=0]])
	变量 文本框_路径 : 文本框
	@布局配置([[父布局=线性布局2,字体大小=9]])
	变量 文本框_描述 : 文本框
	@布局配置([[父布局=相对布局2,@位于布局中间=真,@位于布局右边=真,内容="创建",粗体=真,字体大小=16,@右外边距DP=20,字体颜色=-1]])
	变量 文本框_创建 : 文本框
	@布局配置([[父布局=相对布局1,@位于某组件之下=1,分割线高度=0]])
	变量 自定义列表框1 : 自定义列表框

	变量 环境 : 安卓环境?
	变量 初始路径 : 文本
	变量 当前路径 : 文本
	变量 样式 : lin文件管理器_样式
	变量 模式 : 整数
	变量 回退 : lin文件管理器_视图容器
	变量 路径集合 : 文本集合
	变量 数据集合 : 集合
	变量 选中集合 : 集合

	方法 初始化(环境 : 安卓环境,路径 : 文本)
		订阅事件()
		本对象.环境 = 环境
		本对象.初始路径 = 路径
		本对象.当前路径 = 路径
		本对象.模式 = lin文件管理器_模式.查阅
		加载路径()
	结束 方法

	方法 增减选中项(目标 : lin文件管理器_数据容器)
		如果 选中集合.是否存在(目标) 则
			选中集合.删除成员2(目标)
			目标.状态 = lin文件管理器_视图状态.默认
		否则
			如果 取反(目标.回退) 则
				选中集合.添加成员(目标)
				目标.状态 = lin文件管理器_视图状态.选中
			结束 如果
		结束 如果
		如果 选中集合.长度 <= 0 则
			模式 = lin文件管理器_模式.查阅
		结束 如果
	结束 方法

	方法 更新路径(路径 : 文本)
		本对象.当前路径 = 路径
		本对象.加载路径()
	结束 方法

	方法 加载路径()
		数据集合.清空()
		路径集合.清空()
		变量 文件数量 : 整数 = 0
		变量 目录数量 : 整数 = 0
		@code
		java.io.File directory = new java.io.File(#当前路径);
		#路径集合.add(directory.getParent());
        // 检查目录是否存在以及是否为目录
        if (directory.exists() && directory.isDirectory()) {
            // 获取目录下所有文件和子目录
            java.io.File[] files = directory.listFiles();
            if (files != null) {
                for (java.io.File file : files) {
                    // 判断是文件还是目录
                    if (file.isDirectory()) {
                        #路径集合.add(file.getAbsolutePath());
						#目录数量++;
                    } else {
                        #路径集合.add(file.getAbsolutePath());
						#文件数量++;
                    }
                }
            }
        } else {
            #错误("路径不存在或不是目录");
        }
		@end
		配置主题(文件数量,目录数量)
		循环(i, 0, 路径集合.长度)
			变量 临时数据 : lin文件管理器_数据容器
			临时数据.路径 = 路径集合[i]
			临时数据.状态 = lin文件管理器_视图状态.默认
			临时数据.容器 = 本对象
			如果 是否为目录(临时数据.路径) 则
				临时数据.类型 = lin文件管理器_类型.目录
			否则
				临时数据.类型 = lin文件管理器_类型.文档
			结束 如果
			如果 i == 0 则
				临时数据.回退 = 真
			否则
				临时数据.回退 = 假
			结束 如果
			数据集合.添加成员(临时数据)
		结束 循环
		自定义列表框1.更新项目(路径集合.长度)
		加载目录(当前路径)
	结束 方法

	方法 配置主题(文件数量 : 整数,目录数量 : 整数)
		相对布局1.背景颜色 = 样式.背景色
		文本框_路径.内容 = 当前路径.替换(取存储卡路径(),"")
		文本框_描述.内容 = 文件数量 + "个文件，" + 目录数量 + "个目录"
		文本框_路径.字体颜色 = 样式.文本色
		文本框_描述.字体颜色 = 样式.副文本
	结束 方法

	事件 自定义列表框1 : 加载布局(索引 : 整数,项目布局 : 组件容器) : 组件容器
		变量 临时组件 : lin文件管理器_视图容器
		变量 临时数据 : lin文件管理器_数据容器 = 数据集合[索引]
		临时组件.初始化(临时数据)
		返回 临时组件
	结束 事件

	/*
	组件被触摸时事件，本事件需要返回值
	返回真则拦截后续默认处理
	返回假则还要继续执行默认处理
	*/
	事件 相对布局1:被触摸(来源事件 : 触摸事件) : 逻辑型
		返回 真
	结束 事件

	//用户在组件上单击事件
	事件 文本框_创建:被单击()
		单击菜单(当前路径)
	结束 事件
	
	方法 取文件名后缀(文件名 : 文本) : 文本
		变量 后缀 : 文本
		@code
		if (#文件名 == null) {
            return "";
        }
        int index = #文件名.lastIndexOf('.');
        if (index == -1) {
            return ""; // 文件没有后缀
        } else {
            #后缀 = #文件名.substring(index + 1); // 获取后缀
        }
		@end
		返回 后缀.到大写()
	结束 方法

	定义事件 错误(参数 : 文本)
	定义事件 打开文件(路径 : 文本,文件后缀 : 文本)
	定义事件 加载目录(路径 : 文本)
	定义事件 单击菜单(所在目录 : 文本)
结束 类

类 lin文件管理器_数据容器
	变量 状态 : 整数
	变量 路径 : 文本
	变量 回退 : 逻辑型
	变量 类型 : 整数
	变量 容器 : lin文件管理器?
结束 类

类 lin文件管理器_视图容器 : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度DP=50]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,@位于布局中间=真,@位于布局左边=真,@左外边距DP=14]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度DP=40,高度DP=40]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局1,纵向布局=真,@左外边距DP=7]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,字体大小=16]])
	变量 文本框_标题 : 文本框
	@布局配置([[父布局=线性布局2,字体大小=9]])
	变量 文本框_副标题 : 文本框
	@布局配置([[父布局=相对布局1,@位于布局右边=真,@位于布局中间=真,@右外边距DP=14]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=40,高度DP=40]])
	变量 图片框2 : 图片框

	变量 数据 : lin文件管理器_数据容器

	方法 配置样式()
		假如 数据.状态
			是 lin文件管理器_视图状态.默认
				本对象.文本框_标题.字体颜色 = 数据.容器.样式.文本色
				本对象.文本框_副标题.字体颜色 = 数据.容器.样式.副文本
				本对象.相对布局1.背景颜色 = 0x00000000
			是 lin文件管理器_视图状态.选中
				本对象.文本框_标题.字体颜色 = 数据.容器.样式.选中文本色
				本对象.文本框_副标题.字体颜色 = 数据.容器.样式.副文本
				本对象.相对布局1.背景颜色 = 数据.容器.样式.选中背景色
		结束 假如
	结束 方法

	方法 初始化(数据 : lin文件管理器_数据容器)
		本对象.数据 = 数据
		配置样式()
		如果 是否为目录(数据.路径) 则
			数据.类型 = lin文件管理器_类型.目录
			图片框1.宽度 = 0
			如果 数据.回退 则
				文本框_标题.内容 = "../"
				文本框_副标题.高度 = 0
				如果(数据.容器.初始路径.替换("/","") == 数据.容器.当前路径.替换("/",""))
					相对布局1.可视状态 = 组件可视状态.隐藏
				结束 如果
			否则
				文本框_标题.内容 = 取文件名(数据.路径)
				文本框_副标题.内容 = 取文件修改时间(数据.路径)
			结束 如果
		否则
			数据.类型 = lin文件管理器_类型.文档
			文本框_标题.内容 = 取文件名(数据.路径)
			文本框_副标题.内容 = 取文件修改时间(数据.路径)
		结束 如果
		订阅事件()
	结束 方法

	事件 相对布局1 : 被单击()
		如果 数据.容器.模式 == lin文件管理器_模式.查阅 则
			如果 数据.类型 == lin文件管理器_类型.目录 则
				数据.容器.更新路径(数据.路径)
			否则
				数据.容器.打开文件(数据.路径,数据.容器.取文件名后缀(取文件名(数据.路径)))
			结束 如果
		否则 数据.容器.模式 == lin文件管理器_模式.多选
			数据.容器.增减选中项(数据)
		结束 如果
		配置样式()
	结束 事件

	事件 相对布局1 : 被长按()
		如果 数据.容器.模式 == lin文件管理器_模式.查阅 则
			数据.容器.模式 = lin文件管理器_模式.多选
			数据.容器.增减选中项(数据)
		否则 数据.容器.模式 == lin文件管理器_模式.多选

		结束 如果
		配置样式()
	结束 事件
结束 类

@静态
类 lin文件管理器_模式
	@静态
	常量 查阅 : 整数 = 0
	@静态
	常量 多选 : 整数 = 1
	@静态
	常量 粘贴 : 整数 = 2
结束 类

@静态
类 lin文件管理器_类型
	@静态
	常量 文档 : 整数 = 1
	@静态
	常量 目录 : 整数 = 2
结束 类

@静态
类 lin文件管理器_视图状态
	@静态
	常量 默认 : 整数 = 0
	@静态
	常量 选中 : 整数 = 1
结束 类