类 场景编辑器 : 窗口

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 侧滑布局1 : 侧滑布局
	@布局配置([[父布局=侧滑布局1,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1]])
	变量 游戏画布1 : 游戏画布
	@布局配置([[父布局=相对布局1,内容="添加实体",@位于布局底部=真,@位于布局右边=真,ID=20]])
	变量 按钮1 : 按钮
	@布局配置([[父布局=相对布局1,内容="代码"]])
	变量 按钮2 : 按钮
	@布局配置([[父布局=相对布局1,内容="初始化",@位于布局底部=真,ID=21,@位于某组件左边=20]])
	变量 按钮3 : 按钮
	@布局配置([[父布局=相对布局1,@位于布局右边=真,宽度DP=200,最大进度=1000,高度DP=40,ID=30]])
	变量 拖动条1 : 拖动条
	@布局配置([[父布局=相对布局1,@位于布局右边=真,宽度DP=200,最大进度=1000,高度DP=40,ID=31,@位于某组件之下=30]])
	变量 拖动条2 : 拖动条
	@布局配置([[父布局=相对布局1,@位于布局右边=真,宽度DP=200,最大进度=100,高度DP=40,ID=32,@位于某组件之下=31]])
	变量 拖动条3 : 拖动条

	变量 临时世界 : 世界
	变量 临时场景 : 场景
	变量 世界画笔 : 画笔
	变量 代码布局 : 场景编辑器_代码视图
	变量 画布就绪 : 逻辑型 = 假
	变量 camera : 相机
	变量 场景代码 : JSON对象 = [[{
		"name":"nav",
		"width":40,
		"height":40,
		"entity":[
		],
		"cells":[
		]
	}]]

	方法 更新数据()
		代码布局.数据更新()
	结束 方法
	
	事件 拖动条1 : 进度被改变(当前进度 : 整数,是否人为改变 : 逻辑型)
		camera.位置.x = 当前进度
	结束 事件
	
	事件 拖动条2 : 进度被改变(当前进度 : 整数,是否人为改变 : 逻辑型)
		camera.位置.y = 当前进度
	结束 事件
	
	事件 拖动条3 : 进度被改变(当前进度 : 整数,是否人为改变 : 逻辑型)
		// camera.高度 = 当前进度
		// camera.宽度 = 当前进度
	结束 事件
	
	事件 临时场景 : 加载进度更新(sum : 整数)
		拖动条3.进度 = sum
	结束 事件

	事件 场景编辑器 : 创建完毕()
		世界画笔.设置颜色(0xffff3737)
		世界画笔.设置画笔宽度(6.0f)
		游戏画布1.硬件加速 = 真

		循环(i, 0, 场景代码.取整数("width") * 场景代码.取整数("height"))
			变量 temp : JSON对象 = "{}"
			变量 line : 整数 = i / 场景代码.取整数("width")
			temp.置入("y",line)
			temp.置入("x",i - line * 场景代码.取整数("width"))
			temp.置入("img","cao.png")
			temp.置入("void",假)
			场景代码.取JSON数组("cells").置入(temp)
		结束 循环
		
		代码布局.绑定数据(场景代码)
		侧滑布局1.左侧布局 = 代码布局
		
		// 临时场景.实例化(场景代码,临时世界,camera)
		订阅事件()
	结束 事件

	事件 游戏画布1 : 游戏画布创建完毕()
		// 临时场景.实例化(场景代码,临时世界)
		画布就绪 = 真
		弹出提示("画布就绪")
		拖动条1.进度 = 游戏画布1.获取画布().返回画布密度()
		camera.高度 = 游戏画布1.获取画布().返回高度() / 2
		camera.宽度 = 游戏画布1.获取画布().返回宽度() / 2
		游戏画布1.激活()
	结束 事件

	事件 游戏画布1 : 画布单击按下(x : 整数,y : 整数)
		
	结束 事件

	事件 游戏画布1 : 执行绘制()
		如果 画布就绪 则
			变量 hb : 画布 = 游戏画布1.获取画布()
			hb.填充画布颜色1(0xff000000)
			变量 宽度 : 单精度小数 = hb.返回宽度() / 2
			变量 高度 : 单精度小数 = hb.返回高度() / 2
			hb.绘制线条(0.0f,0.0f,宽度,0.0f,世界画笔)
			hb.绘制线条(0.0f,0.0f,0.0f,高度,世界画笔)
			hb.绘制线条(宽度,0.0f,宽度,高度,世界画笔)
			hb.绘制线条(0.0f,高度,宽度,高度,世界画笔)
			临时场景.绘制(游戏画布1.获取画布())
		结束 如果
	结束 事件

	//用户在组件上单击事件
	事件 按钮1 : 被单击()
		变量 对话 : 输入对话框
		变量 temp : 文本 = [[{"type":0,"tick":20,"void":false,"x":0,"y":0,"imgList":["house.png"]}]]
		对话.内容 = temp
		对话.按钮1 = "确定"
		对话.按钮2 = "取消"
		事件 对话 : 按钮1被单击()
			变量 tempjson : JSON对象 = 对话.内容
			场景代码.取JSON数组("entity").置入(tempjson)
			更新数据()
		结束 事件
		对话.显示()
	结束 事件

	事件 场景编辑器 : 标题栏返回键被单击()
		变量 对话 : 对话框
		对话.标题 = "提示"
		对话.信息 = "确认退出?"
		对话.按钮1 = "确认"
		事件 对话 : 按钮1被单击()
			关闭窗口()
		结束 事件
		对话.显示()
	结束 事件

	//用户在组件上单击事件
	事件 按钮2:被单击()
		侧滑布局1.打开左侧滑栏()
	结束 事件

	//用户在组件上单击事件
	事件 按钮3:被单击()
		临时场景.实例化(场景代码,临时世界,camera)
	结束 事件
结束 类

类 场景编辑器_代码视图 : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度DP=600,@位于布局底部=真,对齐方式=48,背景颜色=-10461088]])
	变量 编辑框1 : 编辑框

	变量 data : JSON对象?

	事件 场景编辑器_代码视图 : 创建完毕()
		订阅事件()
	结束 事件

	事件 场景编辑器_代码视图 : 绑定数据(数据 : 对象)
		变量 temp : JSON对象 = 数据
		data = temp
		数据更新()
	结束 事件

	方法 数据更新()
		编辑框1.内容 = data.到文本(4)
	结束 方法

结束 类