类 实体
	变量 id : 整数
	变量 名字 : 文本
	变量 战斗属性 : 数值容器
	变量 成长属性 : 数值容器
	变量 等级 : 整数
	变量 经验 : 整数
	变量 标签 : 索引数值容器
	变量 技能列表 : 技能容器
	/********************/
	//面板属性 = (战斗属性 + 等级 * 成长属性) * (1 + 技能属性)
	变量 面板属性 : 数值容器
	/********************/
	方法 修改等级(值 : 整数)
		等级 = 值
		合并面板属性()
	结束 方法
	
	方法 获取经验(值 : 整数)
		经验 = 经验 + 值
		如果 经验 >= 等级系统.求角色升级所需经验(等级) 则
			提升等级(1)
			经验 = 0
		结束 如果
	结束 方法
	
	方法 提升等级(值 : 整数)
		等级 = 等级 + 值
		合并面板属性()
		升级(等级 - 值,值)
	结束 方法
	
	方法 合并面板属性()
		面板属性 = 战斗属性.合并2(成长属性.乘法(等级))
	结束 方法
	
	方法 序列化() : JSON对象
		变量 jo战斗属性 : JSON对象 = 战斗属性.序列化()
		变量 jo技能列表 : JSON对象 = 技能列表.序列化()
		变量 jo成长属性 : JSON对象 = 成长属性.序列化()
		变量 jo标签列表 : JSON对象 = 标签.序列化()
		变量 jo实体属性 : JSON对象 = "{}"
		jo实体属性.置入("name",名字)
		jo实体属性.置入("id",id)
		jo实体属性.置入("level",等级)
		jo实体属性.置入("EXP",经验)
		jo实体属性.置入("attributeValue",jo战斗属性.取JSON数组("data"))
		jo实体属性.置入("skill",jo技能列表.取JSON数组("data"))
		jo实体属性.置入("growthAttribute",jo成长属性.取JSON数组("data"))
		jo实体属性.置入("tag",jo标签列表.取JSON数组("data"))
		序列化补充(jo实体属性)
		返回 jo实体属性
	结束 方法
	
	方法 实例化(value : JSON对象)
		名字 = value.取文本("name")
		id = value.取整数("id")
		等级 = value.取整数("level")
		经验 = value.取整数("EXP")
		战斗属性.实例化(value.取JSON数组("attributeValue"))
		技能列表.实例化(value.取JSON数组("skill"))
		成长属性.实例化(value.取JSON数组("growthAttribute"))
		标签.实例化(value.取JSON数组("tag"))
		实例化补充(value)
		订阅事件()
	结束 方法
	
	@虚拟事件
	方法 序列化补充(value : JSON对象)
	结束 方法
	
	@虚拟事件
	方法 实例化补充(value : JSON对象)
	结束 方法
	
	定义事件 升级(升级前等级 : 整数,升级后等级 : 整数)
结束 类

类 角色 : 实体
	变量 附加属性 : 数值容器
	变量 装备列表 : 装备容器
	变量 接触角色 : 羁绊容器
	变量 职业 : 整数
	变量 基础决策 : 决策器
	变量 性别 : 逻辑型
	变量 速度 : 整数
	变量 种族 : 整数
	
	方法 合并所有属性()
		
	结束 方法
	
	事件 角色 : 序列化补充(value : JSON对象)
		基础决策.初始化(本对象)
		value.置入("fetter",接触角色.序列化().取JSON数组("data"))
		value.置入("addition",附加属性.序列化().取JSON数组("data"))
		value.置入("equipment",装备列表.序列化().取JSON数组("data"))
		value.置入("occupation",职业)
		value.置入("sex",性别)
		value.置入("speed",速度)
	结束 事件
	
	事件 角色 : 实例化补充(value : JSON对象)
		接触角色.实例化(value.取JSON数组("fetter"))
		附加属性.实例化(value.取JSON数组("addition"))
		装备列表.实例化(value.取JSON数组("equipment"))
		职业 = value.取整数("occupation")
		性别 = value.取逻辑值("sex")
		速度 = value.取整数("speed")
		标签.添加(tags.角色)
	结束 事件
	
	方法 取面板属性() : 数值容器
		返回 面板属性
	结束 方法
	
	方法 取装备列表() : 装备容器
		返回 装备列表
	结束 方法
	
	方法 取对某角色印象(目标 : 角色) : 羁绊
		变量 temp : 羁绊
		如果 接触角色.是否存在(目标.id) 则
			temp = 接触角色.取(目标.id)
			返回 temp
		否则
			temp = 生成器.空羁绊(目标.id)
			返回 temp
		结束 如果
	结束 方法
	
	方法 执行动作(环境 : 战斗执行器,阵营 : 逻辑型,回调 : 动作回调)
		预备执行动作()
		如果 标签.是否存在(tags.玩家) 则
			传递(环境,回调)
			环境.模式 = 战斗执行器_模式.选取模式
		否则
			基础决策.执行_战斗(环境,回调,阵营)
		结束 如果
	结束 方法
	
	定义事件 传递(环境 : 战斗执行器,回调 : 动作回调)
	定义事件 预备执行动作()
	定义事件 动作执行结束()
结束 类

类 装备 : 实体
	变量 类型 : 整数
	变量 品质 : 整数
	变量 耐久 : 整数
	
	事件 装备 : 序列化补充(value : JSON对象)
		
	结束 事件
	
	事件 装备 : 实例化补充(value : JSON对象)
		标签.添加(tags.装备)
	结束 事件
结束 类

类 道具 : 实体
	变量 可堆叠 : 逻辑型
	变量 可使用 : 逻辑型
	
	事件 道具 : 序列化补充(value : JSON对象)
		
	结束 事件
	
	事件 道具 : 实例化补充(value : JSON对象)
		标签.添加(tags.道具)
	结束 事件
结束 类

类 背包
	变量 容量 : 整数
	
结束 类


@静态
类 等级系统
	@静态
	常量 角色等级系数 : 整数 = 80
	@静态
	方法 求角色升级所需经验(当前等级 : 整数) : 整数
		返回 角色等级系数 * (当前等级 + 1) * 1.1
	结束 方法
结束 类

@静态
类 品质等级
	@静态
	常量 劣质 : 整数 = 50
	@静态
	常量 普通 : 整数 = 51
	@静态
	常量 良好 : 整数 = 52
	@静态
	常量 优秀 : 整数 = 53
	@静态
	常量 卓越 : 整数 = 54
	@静态
	常量 史诗 : 整数 = 55
	@静态
	常量 传奇 : 整数 = 56
	@静态
	常量 神器 : 整数 = 57
	@静态
	常量 永恒 : 整数 = 58
	@静态
	常量 虚无 : 整数 = 59
	@静态
	方法 品质评分(装备品质分 : 整数) : 整数
		变量 装备品质等级 : 整数 = 普通
		变量 劣质评分 : 范围整数 = (0,29)
		变量 普通评分 : 范围整数 = (30,119)
		变量 良好评分 : 范围整数 = (120,179)
		变量 优秀评分 : 范围整数 = (180,259)
		变量 卓越评分 : 范围整数 = (260,299)
		变量 史诗评分 : 范围整数 = (300,589)
		变量 传奇评分 : 范围整数 = (590,899)
		变量 神器评分 : 范围整数 = (900,9999)
		如果 劣质评分.是否包含(装备品质分) 则
			返回 劣质
		否则 普通评分.是否包含(装备品质分)
			返回 普通
		否则 良好评分.是否包含(装备品质分)
			返回 良好
		否则 优秀评分.是否包含(装备品质分)
			返回 优秀
		否则 卓越评分.是否包含(装备品质分)
			返回 卓越
		否则 史诗评分.是否包含(装备品质分)
			返回 史诗
		否则 传奇评分.是否包含(装备品质分)
			返回 传奇
		否则 神器评分.是否包含(装备品质分)
			返回 神器
		结束 如果
	结束 方法
结束 类

类 属性种类
	常量 战斗属性 : 整数 = 0
	常量 成长属性 : 整数 = 1
	常量 附加属性 : 整数 = 2
结束 类

