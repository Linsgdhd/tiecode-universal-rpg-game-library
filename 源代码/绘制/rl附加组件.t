类 游戏轮盘
	变量 xs : 单精度小数 = 0.0f
	变量 ys : 单精度小数 = 0.0f
	变量 xe : 单精度小数 = 0.0f
	变量 ye : 单精度小数 = 0.0f

	变量 最大能量 : 单精度小数 = 0.0f
	变量 轮盘半径 : 单精度小数 = 90.0f
	变量 摇杆半径 : 单精度小数 = 30.0f
	变量 原始点 : rl坐标
	变量 移动点 : rl坐标
	变量 轮盘画笔 : 画笔
	变量 摇杆画笔 : 画笔
	变量 已激活 : 逻辑型
	方法 初始化(x : 单精度小数,y : 单精度小数)
		轮盘画笔.设置颜色(0xffff0000)
		轮盘画笔.设置画笔宽度(2.0f)
		摇杆画笔.设置颜色(0xff0000ff)
		摇杆画笔.设置画笔宽度(2.0f)
		原始点.x = 轮盘半径
		原始点.y = 轮盘半径
		移动点.x = 轮盘半径
		移动点.y = 轮盘半径
		最大能量 = 2.0f
		本对象.xs = x
		本对象.ys = y
	结束 方法
	
	方法 激活(参数 : rl坐标)
		已激活 = 真
		变量 temp : rl坐标
		temp.x = 参数.x
		temp.y = 参数.y
		原始点 = 参数
		移动点 = temp
	结束 方法
	
	方法 输入(参数 : rl坐标)
		移动点 = 参数
		变量 temp : rl坐标 = 移动点 - 原始点
		输出向量(等比缩小(temp,最大能量))
	结束 方法
	
	方法 等比缩小(参数 : rl坐标,最大值 : 单精度小数) : rl坐标
		变量 kx : 单精度小数 = 最大值 / 参数.x
		变量 ky : 单精度小数 = 最大值 / 参数.y
		变量 k : 单精度小数 = 数学.min_float(数学.abs_float(kx),数学.abs_float(ky))
		变量 temp : rl坐标
		temp.x = 参数.x * k
		temp.y = 参数.y * k
		返回 temp
	结束 方法
	
	方法 回正()
		已激活 = 假
		原始点.x = 轮盘半径
		原始点.y = 轮盘半径
		移动点.x = 轮盘半径
		移动点.y = 轮盘半径
		输出向量(移动点 - 原始点)
	结束 方法
	
	方法 绘制轮盘(canvas : 画布)
		变量 temp : rl坐标 = 移动点 - 原始点
		// 数学.两点相距(移动点,原始点)
		canvas.绘制圆(xs,ys,轮盘半径,轮盘画笔)
		canvas.绘制圆(temp.x + xs,temp.y + ys,摇杆半径,摇杆画笔)
	结束 方法
	
	定义事件 输出向量(参数 : rl坐标)
结束 类


类 rl按钮 : rl矩形组件
	事件 rl按钮 : 创建完毕()
		调试输出("rl按钮创建完毕")
	结束 事件
	事件 rl按钮 : 绘制(canvas : 画布)
		变量 组件画笔 : 画笔
		组件画笔.设置颜色(背景色)
		组件画笔.设置画笔宽度(6.0f)
		图形.绘制图形(canvas,组件画笔)
		变量 tswb : 文本 = "按钮 : 点数量 - " + 图形.点数量().到文本() + "\n宽度 - " + 宽度.到文本() + "\n高度 - " + 高度.到文本() + "原点 - " + 图形.原点.到文本() + "旋转角度 : " + 旋转角度.到文本()
		canvas.绘制文本(tswb,30,30,组件画笔)
	结束 事件
结束 类

类 单向游戏轮盘 : ui组件
	事件 单向游戏轮盘 : 绘制(canvas : 画布)
	结束 事件
结束 类

类 五角星 : rl多边形组件
	事件 五角星 : 创建完毕()
		变量 t : 坐标容器
		t.add(-50,-20)
		t.add(50,-20)
		t.add(-30,50)
		t.add(0,-50)
		t.add(30,50)
		图形.定义(t)
	结束 事件
	
结束 类