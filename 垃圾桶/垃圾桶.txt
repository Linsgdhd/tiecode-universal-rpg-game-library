
@静态
类 场景实体类型
	@静态
	常量 建筑 : 整数 = 43
	@静态
	常量 天空 : 整数 = 45
	@静态
	常量 角色 : 整数 = 46
结束 类


/*
类 场景
	变量 场景名称 : 文本
	变量 地板列表 : 地板容器
	变量 建筑列表 : 建筑容器
	变量 角色列表 : 场景角色容器
	变量 宽度 : 整数
	变量 高度 : 整数
	变量 相机 : 摄影机
	变量 地板大小 : 整数 = 60
	变量 场景画布 : 画布?
	方法 实例化(value : JSON对象,c : 画布)
		场景名称 = value.取文本("name")
		宽度 = value.取整数("width")
		高度 = value.取整数("height")
		建筑列表.实例化(value.取JSON对象("unit"))
		场景画布 = c
		实例化完成()
	结束 方法
	方法 序列化() : JSON对象
		变量 temp : JSON对象 = "{}"
		temp.置入("name",    场景名称)
		temp.置入("width",   宽度)
		temp.置入("height",  高度)
		temp.置入("unit",    建筑列表.序列化())
		返回 temp
	结束 方法
	方法 绘制()
		变量 地板画笔 : 画笔
		地板画笔.设置颜色(0x00ffff00)
		变量 文本画笔 : 画笔
		文本画笔.设置颜色(0x34ffffff)
		文本画笔.设置文本大小(23)
	结束 方法
	方法 被点击(x : 整数,y : 整数)
		
	结束 方法
	方法 坐标() : rl空间信息
		
	结束 方法
	方法 长度() : 整数
		返回 高度 * 宽度
	结束 方法
	定义事件 取位图(资源id : 整数) : 位图对象
	定义事件 实例化完成()
结束 类

类 摄影机
	变量 倍率 : 单精度小数
	变量 位置 : rl空间信息
	方法 初始化(s : rl空间信息,width : 单精度小数,height : 单精度小数)
		位置 = s
		位置.大小.height = height
		位置.大小.width  = width
	结束 方法
结束 类

类 场景实体
	变量 位置 : rl空间信息
	变量 动画 : 逻辑型
	变量 序列 : 位图容器
	变量 位图 : 文本
	变量 交互 : 逻辑型
	变量 阻碍 : 逻辑型
	变量 穿透 : 逻辑型
	方法 实例化(值 : JSON对象)
		动画 = 值.取逻辑值("isanim")
		如果 动画 则
			序列.实例化(值.取JSON对象("anim"))
		否则
			位图 = 值.取文本("img")
		结束 如果
		交互 = 值.取逻辑值("isinte")
		阻碍 = 值.取逻辑值("ishind")
		穿透 = 值.取逻辑值("ispene")
		附加实例化参数(值)
	结束 方法
	方法 序列化() : JSON对象
		变量 temp : JSON对象 = "{}"
		返回 temp
	结束 方法
	@虚拟事件
	方法 触发交互()
	结束 方法
	@虚拟事件
	方法 附加实例化参数(值 : JSON对象)
	结束 方法
	@虚拟事件
	方法 附加序列化参数(值 : JSON对象) : JSON对象
	结束 方法
结束 类

类 地板 : 场景实体
	变量 虚空 : 逻辑型
结束 类

类 建筑 : 场景实体
	变量 名称 : 文本
	变量 类型 : 整数
	变量 商品 : 集合
	变量 指向 : 文本
结束 类

类 场景角色 : 场景实体
	变量 绑定角色 : 角色?
	方法 移动(x : 整数,y : 整数)
	结束 方法
结束 类

类 商品page
	变量 内容 : 装备
	变量 价格 : 整数
结束 类
*/


/*
类 角色场景实体
	变量 角色动画状态 : 整数
	变量 角色动画状态缓存 : 整数
	变量 站立_向前 : 位图容器
	变量 站立_向后 : 位图容器
	变量 站立_向左 : 位图容器
	变量 站立_向右 : 位图容器
	变量 移动_向前 : 位图容器
	变量 移动_向后 : 位图容器
	变量 移动_向左 : 位图容器
	变量 移动_向右 : 位图容器
	变量 跳动_向前 : 位图容器
	变量 跳动_向后 : 位图容器
	变量 跳动_向左 : 位图容器
	变量 跳动_向右 : 位图容器
	方法 初始化()
	结束 方法
	方法 取位图() : 位图对象
		变量 temp : 位图对象?
		假如 角色动画状态
			是 角色动画类型.站立_向前
				temp = 站立_向前.访问()
			是 角色动画类型.站立_向后
				temp = 站立_向后.访问()
			是 角色动画类型.站立_向左
				temp = 站立_向左.访问()
			是 角色动画类型.站立_向右
				temp = 站立_向右.访问()
			是 角色动画类型.移动_向前
				temp = 移动_向前.访问()
			是 角色动画类型.移动_向后
				temp = 移动_向后.访问()
			是 角色动画类型.移动_向左
				temp = 移动_向左.访问()
			是 角色动画类型.移动_向右
				temp = 移动_向右.访问()
			是 角色动画类型.跳跃_向前
				temp = 跳动_向前.访问()
			是 角色动画类型.跳跃_向后
				temp = 跳动_向后.访问()	
			是 角色动画类型.跳跃_向左
				temp = 跳动_向左.访问()
			是 角色动画类型.跳跃_向右
				temp = 跳动_向右.访问()
		结束 假如
		返回 temp
	结束 方法
	方法 切换动画状态(动画状态 : 整数)
		角色动画状态 = 动画状态
		假如 动画状态
			是 角色动画类型.站立_向前
				站立_向前.重置计数器()
			是 角色动画类型.站立_向后
				站立_向后.重置计数器()
			是 角色动画类型.站立_向左
				站立_向左.重置计数器()
			是 角色动画类型.站立_向右
				站立_向右.重置计数器()
			是 角色动画类型.移动_向前
				移动_向前.重置计数器()
			是 角色动画类型.移动_向后
				移动_向后.重置计数器()
			是 角色动画类型.移动_向左
				移动_向左.重置计数器()
			是 角色动画类型.移动_向右
				移动_向右.重置计数器()
			是 角色动画类型.跳跃_向前
				跳动_向前.重置计数器()
			是 角色动画类型.跳跃_向后
				跳动_向后.重置计数器()
			是 角色动画类型.跳跃_向左
				跳动_向左.重置计数器()
			是 角色动画类型.跳跃_向右
				跳动_向右.重置计数器()
		结束 假如
	结束 方法
结束 类
*/

	// 草，为什么会这样
	@静态
	方法 旋转矩形(v : 矩形,角度 : 单精度小数) : 矩形
		变量 cx : 单精度小数 = v.精确中心横坐标()
		变量 cy : 单精度小数 = v.精确中心纵坐标()
		@code
		android.graphics.Rect rect = #v;
		android.graphics.Matrix m = new android.graphics.Matrix();
		m.postRotate(#角度, #cx, #cy);
		android.graphics.PointF[] points = new android.graphics.PointF[]{
			new android.graphics.PointF(rect.left, rect.top),
            new android.graphics.PointF(rect.right, rect.top),
            new android.graphics.PointF(rect.right, rect.bottom),
            new android.graphics.PointF(rect.left, rect.bottom)
		};
		
		float[] originalPoints = new float[points.length * 2];
        for (int i = 0; i < points.length; i++) {
            originalPoints[i * 2] = points[i].x;
            originalPoints[i * 2 + 1] = points[i].y;
        }
		
        float[] rotatedPoints = originalPoints.clone();
		m.mapPoints(rotatedPoints);
		for (int i = 0; i < points.length; i++) {
            points[i].x = rotatedPoints[i * 2];
            points[i].y = rotatedPoints[i * 2 + 1];
        }

        // 找到旋转后的矩形的边界
        float min_x = Float.MAX_VALUE;
        float min_y = Float.MAX_VALUE;
        float max_x = -Float.MAX_VALUE;
        float max_y = -Float.MAX_VALUE;

        for (android.graphics.PointF point : points) {
            if (point.x < min_x) min_x = point.x;
            if (point.y < min_y) min_y = point.y;
            if (point.x > max_x) max_x = point.x;
            if (point.y > max_y) max_y = point.y;
        }

        // 返回新的边界矩形
        return new android.graphics.Rect(
            (int) Math.floor(min_x), 
            (int) Math.floor(min_y), 
            (int) Math.ceil(max_x), 
            (int) Math.ceil(max_y)
        );
		@end
	结束 方法
    
    // 不认真上学 跑来写代码 就是这样的
    
    // 旋转角度 = 父组件.旋转角度 + 旋转角度

		如果 取反(背景图片 == 空) 则
			背景图片.透明度 = 透明度
		结束 如果

		变量 右边距合并值 : 单精度小数 = 右外边距 + 外边距 + 父组件.内边距 + 父组件.右内边距
		变量 左边距合并值 : 单精度小数 = 左外边距 + 外边距 + 父组件.内边距 + 父组件.左内边距
		变量 上边距合并值 : 单精度小数 = 上外边距 + 外边距 + 父组件.内边距 + 父组件.上内边距
		变量 下边距合并值 : 单精度小数 = 下外边距 + 外边距 + 父组件.内边距 + 父组件.下内边距

		如果 对齐父组件中心 则
			xs = 父组件.取基点().x / 2 - 宽度 / 2
			ys = 父组件.取基点().y / 2 - 高度 / 2
		结束 如果

		如果 对齐父组件左边 则
			xs = 父组件.xs + 左边距合并值
		结束 如果

		如果 对齐父组件右边 则
			xs = 父组件.xe - 宽度 - 右边距合并值
		结束 如果

		如果 对齐父组件顶部 则
			ys = 父组件.ys + 上边距合并值
		结束 如果

		如果 对齐父组件底部 则
			ys = 父组件.ye - 高度 - 下边距合并值
		结束 如果

		xe = xs + 宽度
		ye = ys + 高度

		如果 取反(旋转角度 == 0.0f) 则
			变量 temrect : 矩形 = (xs.到整数(),ys.到整数(),xe.到整数(),ye.到整数())
			变量 newrect : 矩形点位置信息 = 数学.旋转矩形(temrect,旋转角度)
			// 调试输出("旋转完成"+newrect.上.到文本() + newrect.下.到文本() + newrect.左.到文本() + newrect.右.到文本())
			xs = newrect.xs
			xe = newrect.xe
			ys = newrect.ys
			ye = newrect.ye
		结束 如果