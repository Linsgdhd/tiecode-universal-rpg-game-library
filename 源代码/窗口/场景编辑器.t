类 场景编辑器 : 窗口

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 侧滑布局1 : 侧滑布局
	@布局配置([[父布局=侧滑布局1,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1]])
	变量 游戏画布1 : 游戏画布
	@布局配置([[父布局=相对布局1,内容="添加实体",@位于布局底部=真,@位于布局右边=真,ID=20]])
	变量 按钮1 : 按钮
	@布局配置([[父布局=相对布局1,内容="代码"]])
	变量 按钮2 : 按钮
	@布局配置([[父布局=相对布局1,内容="初始化",@位于布局底部=真,ID=21,@位于某组件左边=20]])
	变量 按钮3 : 按钮
	@布局配置([[父布局=相对布局1,@位于布局左边=真,@位于布局底部=真,字体颜色=-65536]])
	变量 文本框1 : 文本框
	@布局配置([[父布局=相对布局1,内容="添加角色",@位于布局底部=真,ID=22,@位于某组件左边=21]])
	变量 按钮4 : 按钮

	变量 临时世界 : 世界
	变量 临时场景 : 场景
	变量 世界画笔 : 画笔
	变量 代码布局 : 场景编辑器_代码视图
	变量 画布就绪 : 逻辑型 = 假
	变量 camera : 相机
	变量 控制器 : 游戏轮盘
	
	变量 临时角色 : 场景实体
	
	变量 场景代码 : JSON对象 = [[{
		"name":"nav",
		"width":40,
		"height":40,
		"entity":[
		],
		"cells":[
		]
	}]]
	
	变量 默认场景实体文本 : 文本 = [[{
		"type":0,
		"tick":20,
		"hinder":true,
		"x":0,
		"y":0,
		"imgList":[
			"house.png"
		]
	}]]
	变量 默认角色实体文本 : 文本 = [[{
		"type":0,
		"tick":15,
		"hinder":true,
		"x":6,
		"y":6,
		"imgList":[
			"a-dj1.png",
			"a-dj2.png",
			"a-dj2.png",
			"a-dj1.png"
		]
	}]]
	方法 更新数据()
		代码布局.数据更新()
	结束 方法
	
	事件 临时场景 : 加载进度更新(sum : 整数)
	结束 事件

	事件 场景编辑器 : 创建完毕()
		世界画笔.设置颜色(0xffff3737)
		世界画笔.设置画笔宽度(6.0f)
		游戏画布1.硬件加速 = 真

		循环(i, 0, 场景代码.取整数("width") * 场景代码.取整数("height"))
			变量 temp : JSON对象 = "{}"
			变量 line : 整数 = i / 场景代码.取整数("width")
			temp.置入("y",line)
			temp.置入("x",i - line * 场景代码.取整数("width"))
			temp.置入("img","cao.png")
			temp.置入("void",假)
			场景代码.取JSON数组("cells").置入(temp)
		结束 循环
		
		代码布局.绑定数据(场景代码)
		侧滑布局1.左侧布局 = 代码布局
		控制器.初始化(200.0f,400.0f)
		// 临时场景.实例化(场景代码,临时世界,camera)
		@code
		if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
			android.view.Display display = this.getWindowManager().getDefaultDisplay();
			for (android.view.Display.Mode mode : display.getSupportedModes()) {
				if (mode.getRefreshRate() > display.getMode().getRefreshRate()) {
					// display.setMode(mode);
					break;
				}
			}
		}
		@end
		
		订阅事件()
	结束 事件

	事件 游戏画布1 : 游戏画布创建完毕()
		// 临时场景.实例化(场景代码,临时世界)
		画布就绪 = 真
		弹出提示("画布就绪")
		游戏画布1.激活()
		camera.高度 = 游戏画布1.获取画布().返回高度() / 2
		camera.宽度 = 游戏画布1.获取画布().返回宽度() / 2
		游戏画布1.目标帧率(窗口管理器.取窗口管理器(本对象),120.0f)
	结束 事件

	事件 游戏画布1 : 画布单击按下(x : 整数,y : 整数)
		变量 距离 : 单精度小数 = 0.0f
		变量 dx : 单精度小数 = 控制器.xs - x
		变量 dy : 单精度小数 = 控制器.ys - y
		code #距离 = (float)Math.sqrt(#dx * #dx + #dy * #dy);
		如果 距离 < 控制器.轮盘半径 则
			变量 temp : rl坐标
			temp.x = x
			temp.y = y
			控制器.激活(temp)
		否则
			临时场景.被触摸(x,y)
		结束 如果
	结束 事件
	
	事件 游戏画布1 : 画布按下滑动(x : 整数,y : 整数,滑动x距离 : 整数,滑动y距离 : 整数)
		变量 距离 : 单精度小数 = 0.0f
		变量 dx : 单精度小数 = 控制器.xs - x
		变量 dy : 单精度小数 = 控制器.ys - y
		code #距离 = (float)Math.sqrt(#dx * #dx + #dy * #dy);
		如果 控制器.已激活 则
			变量 temp : rl坐标
			temp.x = x
			temp.y = y
			控制器.输入(temp)
		结束 如果
	结束 事件
	
	事件 游戏画布1 : 画布单击抬起(x : 整数,y : 整数)
		控制器.回正()
	结束 事件

	事件 游戏画布1 : 执行绘制()
		如果 画布就绪 则
			变量 hb : 画布 = 游戏画布1.获取画布()
			hb.填充画布颜色1(0xff000000)
			变量 宽度 : 单精度小数 = hb.返回宽度() / 2
			变量 高度 : 单精度小数 = hb.返回高度() / 2
			hb.绘制线条(0.0f,0.0f,宽度,0.0f,世界画笔)
			hb.绘制线条(0.0f,0.0f,0.0f,高度,世界画笔)
			hb.绘制线条(宽度,0.0f,宽度,高度,世界画笔)
			hb.绘制线条(0.0f,高度,宽度,高度,世界画笔)
			临时场景.绘制(游戏画布1.获取画布())
			控制器.绘制轮盘(hb)
		结束 如果
	结束 事件
	
	事件 控制器 : 输出向量(向量 : rl坐标)
		提交到主线程运行(本对象)
		文本框1.内容 = "向量:x" + 向量.x.到整数().到文本() + "y" + 向量.y.到整数().到文本() + "\n相机位置:x" + camera.位置.x.到整数().到文本() + "y" + camera.位置.y.到整数().到文本()
		结束提交到主线程()
		/*
		camera.向量.x = 向量.x.到整数() * 16
		camera.向量.y = 向量.y.到整数() * 16
		*/
		如果 临时场景.角色实体容器.长度 >= 1 则
			变量 teme : 场景实体 = 临时场景.角色实体容器.取成员(0)
			teme.向量.x = 向量.x.到整数()
			teme.向量.y = 向量.y.到整数()
		结束 如果
	结束 事件

	//用户在组件上单击事件
	事件 按钮1 : 被单击()
		变量 对话 : 输入对话框
		变量 temp : 文本 = 默认场景实体文本
		对话.内容 = temp
		对话.按钮1 = "确定"
		对话.按钮2 = "取消"
		事件 对话 : 按钮1被单击()
			变量 tempjson : JSON对象 = 对话.内容
			场景代码.取JSON数组("entity").置入(tempjson)
			更新数据()
		结束 事件
		对话.显示()
	结束 事件

	//用户在组件上单击事件
	事件 按钮2:被单击()
		侧滑布局1.打开左侧滑栏()
	结束 事件

	//用户在组件上单击事件
	事件 按钮3:被单击()
		临时场景.实例化(场景代码,临时世界,camera)
	结束 事件
	
	事件 临时场景 : 加载完成()
		camera.初始化(临时场景.网格大小,临时场景.宽度,临时场景.高度)
		camera.位置 = 临时角色.位置
		变量 tem : JSON对象 = 默认角色实体文本.到文本()
		临时场景.添加实体(tem)
	结束 事件
	
	事件 临时场景 : 网格被单击(网格 : 格子)
		变量 temp : rl坐标
		temp.x = 网格.位置.x + 临时场景.网格大小 / 2
		temp.y = 网格.位置.y + 临时场景.网格大小 / 2
		camera.对准坐标(temp)
		临时场景.cursor.位置 = 网格.位置
		调试输出("网格单击")
	结束 事件
	
	事件 临时角色 : 数据更新完成()
		// camera.对准坐标(临时角色.位置)
		// camera.位置 = 临时角色.位置
	结束 事件

	//用户在组件上单击事件
	事件 按钮4 : 被单击()
		变量 对话 : 输入对话框
		变量 temp : 文本 = 默认角色实体文本
		对话.内容 = temp
		对话.按钮1 = "确定"
		对话.按钮2 = "取消"
		事件 对话 : 按钮1被单击()
			调试输出("调用添加实体函数")
			变量 tempjson : JSON对象 = 对话.内容
			临时场景.添加实体(tempjson)
		结束 事件
		对话.显示()
	结束 事件
结束 类

类 场景编辑器_代码视图 : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度DP=600,@位于布局底部=真,对齐方式=48,背景颜色=-10461088]])
	变量 编辑框1 : 编辑框

	变量 data : JSON对象?

	事件 场景编辑器_代码视图 : 创建完毕()
		订阅事件()
	结束 事件

	事件 场景编辑器_代码视图 : 绑定数据(数据 : 对象)
		变量 temp : JSON对象 = 数据
		data = temp
		数据更新()
	结束 事件

	方法 数据更新()
		编辑框1.内容 = data.到文本(4)
	结束 方法

结束 类